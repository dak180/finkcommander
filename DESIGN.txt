OVERVIEW

FinkCommander currently relies on inter-process communication (IPC) to gather information about fink packages and execute fink commands.  Early on there was a discussion on the fink developers' mailing list about the possibility that an Objective C-Perl bridge might eliminate the need for at least some IPC and enhance functionality.  This document sets forth my thoughts on the subject as they evolve.

Dave Vasilevsky, one of the fink developers, pointed out that it would make sense to make FinkCommander more modular so that it will be easier to replace the existing IPC code with code relying on the Obj C-Perl bridge.  To accomplish this, I attempted to take the code relating to running fink and apt-get commands out of FinkController and put it into the IOTaskWrapperClass.  However, when I got past a certain point in this process, every additional change I attempted broke FinkCommander's IPC.  For a while I left the job half undone, with some fink-specific in FinkCommander and some in IOTaskWrapper.  Ultimately, I decided that it would be more consistent with OO design and with the direction FinkCommander is going (as described below) to put the fink and apt-get details back in FinkController.  I have done so; IOTaskWrapper is now completely generalized and could be used in other projects as an enhanced version of the TaskWrapper class in Apple's Moriarity code sample.

Comments on the feasibility of implementing particular features with an Obj C-Perl bridge relate to fink only.  Installing binaries with apt-get requires a different approach.

OBJECTIVE C-PERL BRIDGE

A bridge (Camelbones) is now available.  I have downloaded the framework and written a prototype application that uses the bridge rather than IPC to gather information for the FC table.  I hope to eventually incorporate the framework and this something like this code into FC.  At the moment, I'm having a hard time seeing how I could go much farther with this.  See notes below.

TYPES OF INTERACTION BETWEEN FC AND FP

(1)  Getting Information into Table

Sequence:
FC message to FP requesting info on packages
FP sends array of FinkPackage instances to FC 
FC displays package info in table

Status in current FinkCommander:
Implemented through NSTask and NSPipe in the FinkDataController class
 
Feasibility of Implementing through Obj C-Perl bridge:
I have attempted this once, with less than satisfactory results.  One implementation resulted in duplicate table entries every time the table was updated.  The other failed to update the table after its initial creation.

(2)  Executing Fink or Apt-get Commands

Sequence:
FC receives menu command, asks table which rows are selected
FC sends program name (fink or apt-get), command name and package names to FP
FP runs command with administrator privileges

Status in current FinkCommander:
Implemented through creation of IOTaskWrapper object.  IOTaskWrapper is a modified version of the TaskWrapper class in Apple's "Moriarity" example:
http://developer.apple.com/samplecode/Sample_Code/Cocoa/Moriarity.htm
Authentication is currently handled by having the user enter his password in a secure text field and passing it to the IOTaskWrapper object.  This is not the correct way of doing it, according to Apple, but I am having difficulty seeing how to use Apple's preferred authentication method in FinkCommander.

Feasibility of implementing through Obj C-Perl bridge:
I am sceptical, to say the least.  Discussions on the Omni-Web and Apple mailing lists for Cocoa developers indicate that a running process cannot change its own authorization.  Instead, it must execute a subprocess with administrator privileges using the Security Framework.  This would seem to suggest that FinkCommander cannot use the Obj C-Perl bridge to call a fink subroutine with administrator privileges.  
An alternative that probably would work would be for FinkCommander to use the authorization to give itself root privleges, but this is also frowned upon.

(3)	 Sending stdout from running command to text view in real time

Sequence:
FP receives chunk of output from running command
FC adds output to text view and scrolls to end

Status in current FinkCommander:
Implemented through IOTaskWrapper appendOutput protocol

Feasibility of implementing through Obj C-Perl bridge:
Security concerns are the same here as for (2).  In addition, I believe using the bridge for this type of interaction would require rewriting fink.  Fink relies the Perl system function to execute the scripts and programs that download, patch, configure, build and install the packages.  Since system does not capture the standard output from the executed script or program, it is not returned by the fink subroutines.

(4)  Responding to Fink Request for Input

E.g. pick a virtual dependency, agree to download dependencies, choose option when download fails

Sequence:
While running command, FP receives request for user input
FP sends request to FC
FC displays panel asking for user response
FC sends user response to FP
FP sends user response to running command

Status in current FinkCommander:
Implemented through IOTaskWrapper's writeToStdin: method. 

Feasibility of implementing through Obj C-Perl bridge:
The problems here are similar to those identified in (3), except that here the problem is getting input 
		to rather than taking it from fink.

